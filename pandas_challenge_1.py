# -*- coding: utf-8 -*-
"""Pandas-challenge-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBv8iXIj-lFt-IyAWsJXd0eCRIHdo6mK

## Part 1: Explore the Data

Import the data and use Pandas to learn more about the dataset.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df = pd.read_csv('/content/client_dataset.csv')
df.head()

# View the column names in the data
df.columns

# Use the describe function to gather some basic statistics
df.describe()

# Use this space to do any additional research
# and familiarize yourself with the data.
df.info()

# What three item categories had the most entries?
df['category'].value_counts().head(3)

# For the category with the most entries, which subcategory had the most entries?
df.loc[df['category'] == 'consumables', 'subcategory'].value_counts().head(1)

# Which five clients had the most entries in the data?
df['client_id'].value_counts().head(5)

# Store the client ids of those top 5 clients in a list.
clients_top = df['client_id'].value_counts().head(5).index.tolist()
clients_top

# How many total units (the qty column) did the client with the most entries order order?
df.loc[df['client_id'] == 33615, 'qty'].sum()

"""## Part 2: Transform the Data
Do we know that this client spent the more money than client 66037? If not, how would we find out? Transform the data using the steps below to prepare it for analysis.
"""

# Create a column that calculates the subtotal for each line using the unit_price and the qty
df['whole_subtotal'] = df['unit_price'] * df['qty']

df.head()

df[['unit_price', 'qty', 'whole_subtotal']].head(2)

# Create a column for shipping price.
# Assume a shipping price of $7 per pound for orders over 50 pounds and $10 per pound for items 50 pounds or under.
def shipping_price(combined_weight):
    if combined_weight > 50:
        return combined_weight * 7
    else:
        return combined_weight * 10

df['combined_weight'] = df['unit_weight'] * df['qty']
df['shipping_price'] = df['combined_weight'].apply(shipping_price)
df[['unit_price', 'unit_weight', 'qty', 'combined_weight', 'shipping_price']].head(7)

# Create a column for the total price using the subtotal and the shipping price along with a sales tax of 9.25%
df['total_price'] = df['whole_subtotal'] + df['shipping_price'] * 1.0925
df[['whole_subtotal', 'shipping_price', 'total_price']].head(7)

# Create a column for the cost of each line using unit cost, qty, and
# shipping price (assume the shipping cost is exactly what is charged to the client).
df['line_cost'] = df['unit_cost'] * df['qty'] + df['shipping_price']
df[['unit_cost', 'qty', 'shipping_price', 'line_cost']].head(7)

# Create a column for the profit of each line using line cost and line price
df['line_profit'] = df['total_price'] - df['line_cost']
df[['total_price', 'line_cost', 'line_profit']].head(7)

"""## Part 3: Confirm your work
You have email receipts showing that the total prices for 3 orders. Confirm that your calculations match the receipts. Remember, each order has multiple lines.

Order ID 2742071 had a total price of \$152,811.89

Order ID 2173913 had a total price of \$162,388.71

Order ID 6128929 had a total price of \$923,441.25

"""

# Check your work using the totals above
order_ids = [2742071, 2173913, 6128929]
for order_id in order_ids:
    order_total = df.loc[df['order_id'] == order_id, 'total_price'].sum()
    print(f"Order ID {order_id} had a total price of ${order_total:.2f}")

"""## Part 4: Summarize and Analyze
Use the new columns with confirmed values to find the following information.
"""

def customers_total(client_id, column):
    customers_df = df.loc[df['client_id'] == client_id, column]
    return round(customers_df.sum())
for client_id in clients_top:
    print(f"{client_id}: ${customers_total(client_id, 'total_price')}")

# Create a summary DataFrame showing the totals for the for the top 5 clients with the following information:
# total units purchased, total shipping price, total revenue, and total profit.
customers_dict = {'client_id': clients_top}
columns = ['qty', 'shipping_price', 'line_cost', 'line_profit']
for col in columns:
    customers_dict[col] = [customers_total(client_id, col) for client_id in clients_top]

summary_df = pd.DataFrame(customers_dict)
summary_df

# Format the data and rename the columns to names suitable for presentation.

# Define the money columns.
money_columns = ['shipping_price', 'line_cost', 'line_profit']

# Define a function that converts a dollar amount to millions.
def amount_format_millions(amount):
    return amount / 1000000

# Apply the currency_format_millions function to only the money columns.
for col in money_columns:
    summary_df[col] = summary_df[col].apply(amount_format_millions)

# Rename the columns to reflect the change in the money format.
rename_columns = {
    'client_id': 'Client ID',
    'shipping_price': 'Shipping (millions)',
    'qty': 'Total Units',
    'line_cost': 'Total Cost (millions)',
    'line_profit': 'Total Profit (millions)'
}

summary_df = summary_df.rename(columns = rename_columns)
summary_df

# Sort the updated data by "Total Profit (millions)" form highest to lowest and assign the sort to a new DatFrame.
sorted_df = summary_df.sort_values(by = 'Total Profit (millions)', ascending = False)
sorted_df

